"""Convert llm_configs table to llm_config with single row

Revision ID: b5e249901a7a
Revises: 525a987d73b4
Create Date: 2025-05-14 04:12:56.693312

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision = 'b5e249901a7a'
down_revision = '525a987d73b4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the new table first
    op.create_table('llm_config',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('model_name', sa.String(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('top_p', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('extra_params', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Copy data from the old table to the new one
    # Get the active config (or the first one if none is active)
    connection = op.get_bind()
    
    # First try to get the active config
    active_config = connection.execute(
        text("SELECT * FROM llm_configs WHERE is_active = true LIMIT 1")
    ).fetchone()
    
    # If no active config, get the first one
    if not active_config:
        active_config = connection.execute(
            text("SELECT * FROM llm_configs LIMIT 1")
        ).fetchone()
    
    # If we have a config, migrate it
    if active_config:
        connection.execute(
            text("""
            INSERT INTO llm_config (
                id, name, model_name, temperature, top_p, max_tokens, 
                description, extra_params, created_at, updated_at
            ) VALUES (
                1, :name, :model_name, :temperature, :top_p, :max_tokens, 
                :description, :extra_params, :created_at, :updated_at
            )
            """),
            {
                "name": active_config.name,
                "model_name": active_config.model_name,
                "temperature": active_config.temperature,
                "top_p": active_config.top_p,
                "max_tokens": active_config.max_tokens,
                "description": active_config.description,
                "extra_params": active_config.extra_params,
                "created_at": active_config.created_at,
                "updated_at": active_config.updated_at
            }
        )
    
    # Now drop the old table
    op.drop_index('ix_llm_configs_id', table_name='llm_configs')
    op.drop_index('ix_llm_configs_name', table_name='llm_configs')
    op.drop_table('llm_configs')
    
    # Other migrations (not related to LLM config)
    op.alter_column('messages', 'rag_context',
               existing_type=sa.TEXT(),
               comment='Stores the retrieved context used for RAG responses',
               existing_nullable=True)
    op.alter_column('messages', 'retrieved_doc_ids',
               existing_type=sa.JSON(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               comment='Stores document IDs used in retrieval',
               existing_nullable=True)
    op.drop_index('ix_messages_rag_context', table_name='messages', postgresql_where='(rag_context IS NOT NULL)')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_messages_rag_context', 'messages', ['rag_context'], unique=False, postgresql_where='(rag_context IS NOT NULL)')
    op.alter_column('messages', 'retrieved_doc_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='Stores document IDs used in retrieval',
               existing_nullable=True)
    op.alter_column('messages', 'rag_context',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Stores the retrieved context used for RAG responses',
               existing_nullable=True)
    
    # Create the old llm_configs table
    op.create_table('llm_configs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('top_p', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_tokens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('extra_params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='llm_configs_pkey')
    )
    op.create_index('ix_llm_configs_name', 'llm_configs', ['name'], unique=True)
    op.create_index('ix_llm_configs_id', 'llm_configs', ['id'], unique=False)
    
    # Try to copy data back
    connection = op.get_bind()
    llm_config = connection.execute(text("SELECT * FROM llm_config LIMIT 1")).fetchone()
    
    if llm_config:
        connection.execute(
            text("""
            INSERT INTO llm_configs (
                name, model_name, temperature, top_p, max_tokens, 
                description, extra_params, created_at, updated_at, is_active
            ) VALUES (
                :name, :model_name, :temperature, :top_p, :max_tokens, 
                :description, :extra_params, :created_at, :updated_at, true
            )
            """),
            {
                "name": llm_config.name,
                "model_name": llm_config.model_name,
                "temperature": llm_config.temperature,
                "top_p": llm_config.top_p,
                "max_tokens": llm_config.max_tokens,
                "description": llm_config.description,
                "extra_params": llm_config.extra_params,
                "created_at": llm_config.created_at,
                "updated_at": llm_config.updated_at
            }
        )
    
    # Drop the new table
    op.drop_table('llm_config')
    # ### end Alembic commands ### 