"""add_message_sequence_number

Revision ID: 993d9f9a4f71
Revises: 858a412253ee
Create Date: 2025-05-05 09:35:32.496245

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = '993d9f9a4f71'
down_revision = '858a412253ee'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('messages', sa.Column('sequence_number', sa.Integer(), nullable=True, comment='Per-conversation sequential counter starting from 1'))
    
    # Initialize sequence numbers for existing messages
    conn = op.get_bind()
    
    # Get all conversations with messages
    conversations = conn.execute(text("SELECT DISTINCT conversation_id FROM messages")).fetchall()
    
    # For each conversation, update the sequence numbers in order of timestamp
    for conversation_id in conversations:
        messages = conn.execute(
            text("SELECT id FROM messages WHERE conversation_id = :conversation_id ORDER BY timestamp"),
            {"conversation_id": conversation_id[0]}
        ).fetchall()
        
        for i, message_id in enumerate(messages, 1):
            conn.execute(
                text("UPDATE messages SET sequence_number = :seq WHERE id = :id"),
                {"seq": i, "id": message_id[0]}
            )
    
    # Now make the column non-nullable
    op.alter_column('messages', 'sequence_number', nullable=False)
    
    op.create_unique_constraint('uq_message_conversation_sequence', 'messages', ['conversation_id', 'sequence_number'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_message_conversation_sequence', 'messages', type_='unique')
    op.drop_column('messages', 'sequence_number')
    # ### end Alembic commands ### 