# Docker Compose file for the FastAPI application
version: '3.8'

services:
  # Main FastAPI application
  api:
    build: .
    container_name: llm-chatbot-api
    ports:
      - "35430:35430"
    environment:
      # App Settings
      - APP_NAME=LLM Chatbot API
      
      # JWT Settings (Change these in production!)
      - SECRET_KEY=your_super_secure_jwt_secret_key_change_this
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=2400
      
      # Database Settings
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chatbot
      
      # LLM Settings
      - OPENAI_API_KEY=EMPTY
      - OPENAI_API_BASE=http://your-llm-server:port/v1
      - LLM_MODEL=your-model-name
      - LLM_MAX_TOKENS=2000
      - LLM_TEMPERATURE=0.1
      - LLM_TOP_P=0.95
      - LLM_CONFIG_NAME=LLM Configuration
      
      # MinIO Settings
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_DEFAULT_BUCKET=documents
      - MINIO_SECURE=false
      
      # RAG Settings
      - REMOTE_EMBEDDER_URL=http://your-embedder-server:port/embeddings
      - MILVUS_URI=http://milvus:19530
      - DEFAULT_COLLECTION=default_collection
      - RETRIEVER_TOP_K=10
      
      # Infinity Embeddings Settings
      - INFINITY_EMBEDDINGS_MODEL=stella-en-1.5B
      - INFINITY_API_URL=http://your-infinity-server:port
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      milvus:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs  # Mount logs directory
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: llm-chatbot-postgres
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=chatbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d  # Optional: for initialization scripts
    ports:
      - "35433:5432"  # Expose on custom port to avoid conflicts
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: llm-chatbot-minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # MinIO API
      - "9001:9001"   # MinIO Console
    volumes:
      - minio_data:/data
    restart: unless-stopped
    networks:
      - app-network

  # Milvus Vector Database
  milvus:
    image: milvusdb/milvus:latest
    container_name: llm-chatbot-milvus
    command: ["milvus", "run", "standalone"]
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - minio
    restart: unless-stopped
    networks:
      - app-network

  # etcd for Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: llm-chatbot-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    ports:
      - "2379:2379"
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  minio_data:
  milvus_data:
  etcd_data:

networks:
  app-network:
    driver: bridge
